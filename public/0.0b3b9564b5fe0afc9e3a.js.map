{"version":3,"sources":["./src/app/shared/dashboard-resource/resource-form/resource-form.component.ts","./src/app/shared/dashboard-resource/resource-form/resource-form.component.html","./src/app/shared/dashboard-resource/resource-details/resource-details.component.html","./src/app/shared/dashboard-resource/resource-details/resource-details.component.ts","./src/app/shared/dashboard-resource/search.pipe.ts","./src/app/shared/dashboard-resource/table-view/table-view.component.ts","./src/app/shared/dashboard-resource/table-view/table-view.component.html","./node_modules/ngx-print/__ivy_ngcc__/fesm2015/ngx-print.js","./src/app/shared/dashboard-resource/dashboard-resource.module.ts","./src/app/shared/dashboard-resource/resource-delete/resource-delete.component.ts","./src/app/shared/dashboard-resource/resource-delete/resource-delete.component.html"],"names":["ResourceFormContent","http","route","router","service","this","message","uploading","modal","openModal","initData","resource","history","state","formGroup","patchValue","isEdit","snapshot","routeConfig","path","includes","title","ok","tryCreateResource","tryUpdateResource","dismiss","dismissAll","setTimeout","navigateByUrl","parentUrl","apiUrl","prepareUrl","postUrl","params","post","value","toPromise","then","res","console","log","reset","finally","putUrl","put","ResourceFormComponent","modalService","resolver","type","TYPES","get","data","component","factory","resolveComponentFactory","container","createComponent","content","instance","open","size","backdrop","Map","ResourceDetailsComponent","notifier","context","properties","warning","done","print","document","getElementById","click","url","urls","tableUrl","SearchPipe","search","length","props","Object","keys","filter","e","some","p","toLocaleUpperCase","TableViewComponent","pagination","page","pageSize","find","key","error","actions","behaviour","noDetails","push","icon","name","editUrl","noEdit","noDelete","deleteUrl","transform","resetPagination","NgxPrintDirective","_printStyle","useExistingCss","printDelay","_styleSheetFile","values","hasOwnProperty","JSON","stringify","replace","returnStyleValues","join","cssList","linkTagFn","cssFileName","indexOf","valueArr","split","val","tag","html","elements","getElementsByTagName","index","outerHTML","printContents","printSectionId","innards","i","defaultValue","innerHTML","popupWin","styles","links","getElementTag","getHtmlContents","window","write","printTitle","returnStyleSheetLinkTags","close","ɵfac","t","ɵdir","selectors","hostBindings","rf","ctx","inputs","printStyle","styleSheetFile","NgxPrintModule","ɵmod","ɵinj","imports","DashboardResourceModule","ResourceDeleteComponent","delete","subscribe","success","err","navigate","relativeTo"],"mappings":"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","file":"0.0b3b9564b5fe0afc9e3a.js","sourcesContent":["import {\n  Component, AfterViewInit, ComponentFactoryResolver, ViewChild,\n  ViewContainerRef, Type, OnDestroy, AfterContentInit\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal, NgbModalOptions, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-resource-form-content',\n  template: '<h1>Hello</h1>'\n})\n// tslint:disable-next-line: component-class-suffix\nexport abstract class ResourceFormContent implements AfterViewInit, AfterContentInit {\n  title: string;\n  message: string;\n  formGroup: FormGroup;\n  isEdit: boolean;\n\n  public uploading: boolean;\n\n  modal: NgbModalRef;\n\n  abstract get postUrl(): string;\n  abstract get putUrl(): string;\n  abstract get parentUrl(): string;\n\n  constructor(protected http: HttpClient, protected route: ActivatedRoute, protected router: Router, protected service: NgbModal) {\n    this.message = 'Please fill the following form then click submit button';\n    this.uploading = false;\n  }\n\n  ngAfterViewInit(): void {\n    this.modal = this.openModal();\n    this.initData();\n  }\n\n  ngAfterContentInit(): void {\n  }\n\n  initData(): void {\n    const resource = history.state.resource;\n\n    if (resource)\n    {\n      this.formGroup.patchValue(resource);\n    }\n\n    this.isEdit = this.route.snapshot.routeConfig.path.includes('edit');\n    this.title = this.isEdit ? 'Edit Resource' : 'Create Resource';\n\n    if (this.isEdit && !resource)\n    {\n      return this.ok();\n    }\n  }\n\n  abstract openModal(): NgbModalRef;\n\n  submit(): void {\n    this.tryCreateResource();\n    this.tryUpdateResource();\n  }\n\n  ok(): void {\n    if (this.modal)\n    {\n      this.modal.dismiss();\n    }\n    else\n    {\n      this.service.dismissAll();\n    }\n    setTimeout(() => {\n      this.router.navigateByUrl(this.parentUrl);\n    }, 250);\n    // history.back();\n  }\n\n  protected async tryCreateResource(): Promise<void> {\n    if (this.isEdit)\n    {\n      return;\n    }\n    this.uploading = true;\n\n    const apiUrl = environment.prepareUrl(this.postUrl, this.route.snapshot.params);\n\n    return this.http.post(apiUrl, this.formGroup.value)\n      .toPromise()\n      .then(res => {\n        console.log(res);\n        if (res)\n        {\n          this.formGroup.reset();\n          this.ok();\n        }\n      })\n      .finally(() => this.uploading = false);\n  }\n\n  protected async tryUpdateResource(): Promise<void> {\n    if (!this.isEdit)\n    {\n      return;\n    }\n\n    this.uploading = true;\n    const apiUrl = environment.prepareUrl(this.putUrl, this.route.snapshot.params);\n\n    return this.http.put(apiUrl, this.formGroup.value)\n      .toPromise()\n      .then(res => {\n        console.log(res);\n        if (res)\n        {\n          this.formGroup.reset();\n          this.ok();\n        }\n      })\n      .finally(() => this.uploading = false);\n  }\n}\n\n@Component({\n  selector: 'app-resource-form',\n  templateUrl: './resource-form.component.html',\n  styleUrls: ['./resource-form.component.scss']\n})\nexport class ResourceFormComponent<TContent extends ResourceFormContent> implements AfterViewInit, OnDestroy {\n  public static TYPES: Map<string, Type<any>> = new Map();\n\n  modal: NgbModalRef;\n  content: TContent;\n  @ViewChild('container', { read: ViewContainerRef }) container: ViewContainerRef;\n\n  constructor(\n    private route: ActivatedRoute,\n    private modalService: NgbModal,\n    private resolver: ComponentFactoryResolver) {\n  }\n\n  ngAfterViewInit(): void {\n    const options: NgbModalOptions = {\n      size: 'md',\n      backdrop: 'static',\n    };\n\n    const type = ResourceFormComponent.TYPES.get(this.route.snapshot.data.component);\n    console.log(type);\n    const factory = this.resolver.resolveComponentFactory<TContent>(type);\n    const component = this.container.createComponent(factory);\n\n    this.content = component.instance;\n    this.modal = this.modalService.open(component.instance, options);\n  }\n\n  ngOnDestroy(): void {\n    if (this.modal != null)\n    {\n      this.modal.dismiss();\n      return;\n    }\n    this.modalService.dismissAll();\n  }\n\n  ok(): void {\n\n  }\n}\n","<ngb-alert type=\"info\" (close)=\"ok()\">{{ content?.message }}</ngb-alert>\n<!-- <span data-notify=\"icon\" class=\"nc-icon nc-simple-add\"></span> -->\n\n<ng-template #container></ng-template>","<ngb-alert type=\"info\" (close)=\"done()\">{{ context.title }}</ngb-alert>\n\n<ng-template #content>\n  <div class=\"modal-header\">\n    <h6 class=\"modal-title pt-1 mt-1\">{{ context.title }}</h6>\n    <button type=\"button\" class=\"close\" style=\"border: none; outline: none;\" (click)=\"done()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"list-group\" id=\"resource-details\">\n      <div class=\"list-group-item list-group-item-action\" *ngFor=\"let prop of context.properties\">\n        <div [ngSwitch]=\"prop.type\">\n          <div *ngSwitchCase=\"'component'\">\n            <ng-content [select]=\"prop.component\" [property]=\"prop\" [value]=\"context.data[prop.key]\"></ng-content>\n          </div>\n          <div *ngSwitchDefault>\n            <h6>{{ context.data.toTitle(prop) }}</h6>\n            <small>{{ prop.title | uppercase }}</small>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12 text-right\">\n        <button *ngIf=\"context.printable\" id=\"printer\" class=\"btn btn-md btn-rounded btn-secondary px-3\" [useExistingCss]=\"true\" printTitle=\"Resource Details\" printSectionId=\"resource-details\" ngxPrint>\n          Print\n        </button>\n\n        <button type=\"button\" class=\"btn btn-md btn-rounded btn-primary px-3\" (click)=\"done()\">\n          <i class=\"nc-icon nc-check-2\"></i>\n          Done\n        </button>\n      </div>\n    </div>\n  </div>\n</ng-template>","import { Component, OnInit, ViewChild, ElementRef, ViewChildren, QueryList, Input, AfterViewInit } from '@angular/core';\nimport { Resource } from '../resource.model';\nimport { IResourceDetailsContext } from './resource-details.context';\nimport { NgbModalRef, NgbModal, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';\nimport { Router } from '@angular/router';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { NgModel } from '@angular/forms';\n\n@Component({\n  selector: 'app-resource-details',\n  templateUrl: './resource-details.component.html',\n  styleUrls: ['./resource-details.component.scss']\n})\nexport class ResourceDetailsComponent<TModel extends Resource> implements AfterViewInit {\n  @Input()\n  context: IResourceDetailsContext<TModel>;\n\n  protected modal: NgbModalRef;\n  @ViewChild('content')\n  public content: ElementRef<HTMLElement>;\n\n  constructor(protected router: Router, protected notifier: NotificationService, protected modalService: NgbModal) {\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.context || !this.context.data || !this.context.properties)\n    {\n      this.notifier.warning('Something went wrong, Undefined context', 'Resource Details');\n      this.done();\n      return;\n    }\n\n    const options: NgbModalOptions = {\n      size: 'md',\n      backdrop: 'static',\n    };\n    this.modal = this.modalService.open(this.content, options);\n\n    if (history.state.print)\n    {\n      setTimeout(() => { document.getElementById('printer').click(); }, 250);\n    }\n  }\n\n  public done(): void {\n    const url = this.context?.urls?.tableUrl || '/users';\n    console.log(url);\n    this.router.navigateByUrl(url).then(ok => {\n      if (!ok)\n      {\n        return;\n      }\n      this.modal?.dismiss();\n      this.modalService.dismissAll();\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Resource } from './resource.model';\n\n@Pipe({\n  name: 'search'\n})\nexport class SearchPipe implements PipeTransform {\n\n  transform<T>(data: T[], search: string): T[] {\n    if (!data || data.length === 0)\n    {\n      return [];\n    }\n\n    if (!search)\n    {\n      return data;\n    }\n\n    const props = Object.keys(data[0]);\n    return data.filter(e => props.some(p => `${ e[p] }`.toLocaleUpperCase().includes(search.toLocaleUpperCase())));\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { ITableContext } from './table.context';\nimport { Resource } from '../resource.model';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { SearchPipe } from '../search.pipe';\n\n@Component({\n  selector: 'app-table-view',\n  templateUrl: './table-view.component.html',\n  styleUrls: ['./table-view.component.scss']\n})\nexport class TableViewComponent<TModel extends Resource> implements OnInit {\n  @Input() context: ITableContext<TModel>;\n\n  pagination: { pageSize: number; page: number };\n  find: FormGroup;\n\n  constructor(\n    private notifier: NotificationService,\n    public router: Router,\n    public route: ActivatedRoute,\n    private search: SearchPipe) {\n  }\n\n  ngOnInit(): void {\n    this.pagination = {\n      page: 1,\n      pageSize: 10,\n    };\n\n    this.find = new FormGroup({\n      key: new FormControl(),\n    });\n\n    if (!this.context)\n    {\n      this.notifier.error('Something went wrong, Table context is null');\n    }\n\n    if (!this.context.actions)\n    {\n      this.context.actions = [];\n    }\n\n    if (!this.context.behaviour || !this.context.behaviour.noDetails)\n    {\n      this.context.actions.push({\n        // icon: 'fa fa-info-circle',\n        icon: 'nc-icon nc-alert-circle-i',\n        name: 'Details',\n        type: 'url',\n        url: this.context.urls.editUrl || ':id/details'\n      });\n    }\n\n    if (!this.context.behaviour || !this.context.behaviour.noEdit)\n    {\n      this.context.actions.push({\n        // icon: 'fa fa-edit',\n        icon: 'nc-icon nc-tag-content',\n        name: 'Edit',\n        type: 'url',\n        url: this.context.urls.editUrl || ':id/edit'\n      });\n    }\n\n    if (!this.context.behaviour || !this.context.behaviour.noDelete)\n    {\n      this.context.actions.push({\n        // icon: 'fa fa-trash-o',\n        icon: 'nc-icon nc-simple-remove',\n        name: 'Delete',\n        type: 'url',\n        url: this.context.urls.deleteUrl || ':id/delete'\n      });\n    }\n  }\n\n  public get resources(): TModel[] {\n    const data = this.context.data;\n    const filteredData = this.search.transform<TModel>(data, this.find.value.key);\n\n    return filteredData;\n    // const offset = (this.pagination?.page - 1) * this.pagination?.pageSize;\n\n    // const paginatedData = this.slice.transform(filteredData, offset, offset + this.pagination?.pageSize);\n\n    // return paginatedData;\n  }\n\n  resetPagination(): void {\n    this.pagination.page = 1;\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <ngx-ui-loader loaderId=\"loader-01\"></ngx-ui-loader>\n\n    <router-outlet></router-outlet>\n\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <div class=\"pull-right controls\">\n          <form class=\"form form-inline\" [formGroup]=\"find\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Search\" formControlName=\"key\" (change)=\"resetPagination()\">\n          </form>\n          <ng-content select=\".option\"></ng-content>\n          <a class=\"btn btn-primary btn-rounded\" [routerLink]=\"context?.urls?.createUrl\">\n            Create\n          </a>\n        </div>\n\n        <h6 class=\"card-title\">{{ context?.title }}</h6>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"table-responsive overflow-hidden\">\n          <table class=\"table\">\n            <thead class=\"text-primary\">\n              <tr>\n                <th *ngFor=\"let prop of context?.properties\" [ngStyle]=\"{'width': (80 / context?.properties.length) + '%'}\">\n                  {{ prop.title | uppercase }}\n                </th>\n                <th class=\"text-right\">{{ \"actions\" | uppercase }}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let e of context?.data | search:find.value.key | slice: (pagination?.page-1) * pagination?.pageSize : (pagination?.page-1) * pagination?.pageSize + pagination?.pageSize\">\n                <td *ngFor=\"let prop of context?.properties\" colspan=\"1\">\n                  {{ e.toTitle(prop) }}\n                </td>\n                <td class=\"text-right actions\">\n                  <span class=\"badge badge-pill\" *ngFor=\"let a of context?.actions\" (click)=\"e.do(a, router, route)\" placement=\"bottom\" [ngbTooltip]=\"a.name\">\n                    <i class=\"{{ a.icon }}\"></i>\n                    <!-- <span class=\"name\"></span> -->\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div class=\"row\">\n            <div class=\"col-12 d-flex align-items-center justify-content-center\">\n              <ngb-pagination [(page)]=\"pagination.page\" [pageSize]=\"pagination.pageSize\" [collectionSize]=\"context?.data.length\"></ngb-pagination>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Directive, HostListener, Input, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass NgxPrintDirective {\n    constructor() {\n        this._printStyle = [];\n        /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this.useExistingCss = false;\n        /**\n         * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this.printDelay = 0;\n        /**\n         *\n         *\n         * @return html for the given tag\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this._styleSheetFile = '';\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @param {?} values\n     * @return {?}\n     */\n    set printStyle(values) {\n        for (let key in values) {\n            if (values.hasOwnProperty(key)) {\n                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n            }\n        }\n        this.returnStyleValues();\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @return {?} the string that create the stylesheet which will be injected\n     * later within <style></style> tag.\n     *\n     * -join/replace to transform an array objects to css-styled string\n     *\n     */\n    returnStyleValues() {\n        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\n    }\n    /**\n     * \\@memberof NgxPrintDirective\n     * @param {?} cssList\n     * @return {?}\n     */\n    set styleSheetFile(cssList) {\n        /** @type {?} */\n        let linkTagFn = (/**\n         * @param {?} cssFileName\n         * @return {?}\n         */\n        function (cssFileName) {\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\n        });\n        if (cssList.indexOf(',') !== -1) {\n            /** @type {?} */\n            const valueArr = cssList.split(',');\n            for (let val of valueArr) {\n                this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\n            }\n        }\n        else {\n            this._styleSheetFile = linkTagFn(cssList);\n        }\n    }\n    /**\n     * @private\n     * @return {?} string which contains the link tags containing the css which will\n     * be injected later within <head></head> tag.\n     *\n     */\n    returnStyleSheetLinkTags() {\n        return this._styleSheetFile;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @return {?}\n     */\n    getElementTag(tag) {\n        /** @type {?} */\n        const html = [];\n        /** @type {?} */\n        const elements = document.getElementsByTagName(tag);\n        for (let index = 0; index < elements.length; index++) {\n            html.push(elements[index].outerHTML);\n        }\n        return html.join('\\r\\n');\n    }\n    /**\n     * @private\n     * @return {?} html section to be printed along with some associated inputs\n     *\n     */\n    getHtmlContents() {\n        /** @type {?} */\n        let printContents = document.getElementById(this.printSectionId);\n        /** @type {?} */\n        let innards = printContents.getElementsByTagName('input');\n        for (var i = 0; i < innards.length; i++) {\n            innards[i].defaultValue = innards[i].value;\n        }\n        return printContents.innerHTML;\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @return {?}\n     */\n    print() {\n        /** @type {?} */\n        let printContents;\n        /** @type {?} */\n        let popupWin;\n        /** @type {?} */\n        let styles = '';\n        /** @type {?} */\n        let links = '';\n        if (this.useExistingCss) {\n            styles = this.getElementTag('style');\n            links = this.getElementTag('link');\n        }\n        printContents = this.getHtmlContents();\n        popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\n        popupWin.document.open();\n        popupWin.document.write(`\n      <html>\n        <head>\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\n          ${this.returnStyleValues()}\n          ${this.returnStyleSheetLinkTags()}\n          ${styles}\n          ${links}\n        </head>\n        <body>\n          ${printContents}\n          <script defer>\n            function triggerPrint(event) {\n              window.removeEventListener('load', triggerPrint, false);\n              setTimeout(function() {\n                window.print();\n                setTimeout(function() { window.close(); }, 0);\n              }, ${this.printDelay});\n            }\n            window.addEventListener('load', triggerPrint, false);\n          </script>\n        </body>\n      </html>`);\n        popupWin.document.close();\n    }\n}\nNgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) { return new (t || NgxPrintDirective)(); };\nNgxPrintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxPrintDirective, selectors: [[\"button\", \"ngxPrint\", \"\"]], hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() { return ctx.print(); });\n    } }, inputs: { useExistingCss: \"useExistingCss\", printDelay: \"printDelay\", printStyle: \"printStyle\", styleSheetFile: \"styleSheetFile\", printSectionId: \"printSectionId\", printTitle: \"printTitle\" } });\nNgxPrintDirective.propDecorators = {\n    printSectionId: [{ type: Input }],\n    printTitle: [{ type: Input }],\n    useExistingCss: [{ type: Input }],\n    printDelay: [{ type: Input }],\n    printStyle: [{ type: Input }],\n    styleSheetFile: [{ type: Input }],\n    print: [{ type: HostListener, args: ['click',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPrintDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"button[ngxPrint]\"\n            }]\n    }], function () { return []; }, { useExistingCss: [{\n            type: Input\n        }], printDelay: [{\n            type: Input\n        }], printStyle: [{\n            type: Input\n        }], styleSheetFile: [{\n            type: Input\n        }], print: [{\n            type: HostListener,\n            args: ['click']\n        }], printSectionId: [{\n            type: Input\n        }], printTitle: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxPrintModule {\n}\nNgxPrintModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxPrintModule });\nNgxPrintModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxPrintModule_Factory(t) { return new (t || NgxPrintModule)(); }, imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPrintModule, { declarations: [NgxPrintDirective], exports: [NgxPrintDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPrintModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxPrintDirective],\n                imports: [],\n                exports: [NgxPrintDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxPrintDirective, NgxPrintModule };\n\n//# sourceMappingURL=ngx-print.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule, SlicePipe } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\nimport { TableViewComponent } from './table-view/table-view.component';\nimport { ResourceDetailsComponent } from './resource-details/resource-details.component';\nimport { ResourceFormComponent } from './resource-form/resource-form.component';\nimport { ResourceDeleteComponent } from './resource-delete/resource-delete.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxUiLoaderModule, NgxUiLoaderRouterModule } from 'ngx-ui-loader';\nimport { NgxPrintModule } from 'ngx-print';\nimport { SearchPipe } from './search.pipe';\n\n@NgModule({\n  declarations: [TableViewComponent, ResourceDetailsComponent, ResourceFormComponent, ResourceDeleteComponent, SearchPipe],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgbModule,\n    NgxUiLoaderModule,\n    NgxUiLoaderRouterModule,\n    NgxPrintModule,\n  ],\n  exports: [\n    TableViewComponent,\n    ResourceDetailsComponent,\n    ResourceFormComponent,\n    ResourceDeleteComponent\n  ],\n  providers: [SearchPipe, SlicePipe],\n})\nexport class DashboardResourceModule { }\n","import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, Input } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { environment } from 'src/environments/environment';\nimport { NgbModal, NgbModalRef, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';\n\nexport interface ResourceDeleteContext<T> {\n  deleteUrl: string;\n  data: T;\n  title: string;\n  description: string;\n}\n\n@Component({\n  selector: 'app-resource-delete',\n  templateUrl: './resource-delete.component.html',\n  styleUrls: ['./resource-delete.component.scss']\n})\nexport class ResourceDeleteComponent<TModel> implements AfterViewInit {\n  @Input() context: ResourceDeleteContext<TModel>;\n\n  private modal: NgbModalRef;\n  @ViewChild('content') content: ElementRef;\n\n  public uploading: boolean;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private route: ActivatedRoute,\n    private modalService: NgbModal,\n    private notifier: NotificationService) {\n    this.uploading = false;\n  }\n\n  ngAfterViewInit(): void {\n    const options: NgbModalOptions = {\n      backdrop: 'static',\n      size: 'sm'\n    };\n\n    this.modal = this.modalService.open(this.content, options);\n    // console.log(this.modal);\n    if (!this.modal || !history.state.resource)\n    {\n      this.ok();\n    }\n  }\n\n  public delete(): void {\n    this.uploading = true;\n    this.http\n      .delete<boolean>(environment.prepareUrl(this.context.deleteUrl, this.context.data))\n      .subscribe(ok => {\n        if (ok)\n        {\n          this.notifier.success('Resource deleted successfully');\n          this.ok();\n          this.uploading = false;\n          return;\n        }\n        this.uploading = false;\n        this.notifier.error('Somthing went wrong, Failed to delete the resource');\n      }, err => this.uploading = false);\n  }\n\n  public ok(): void {\n    if (this.modal)\n    {\n      this.modal.dismiss();\n    } else\n    {\n      this.modalService.dismissAll();\n    }\n    this.router.navigate(['../../'], { relativeTo: this.route });\n    // history.back();\n  }\n}\n","<ngb-alert type=\"info\" (close)=\"ok()\">Delete resource</ngb-alert>\n<!-- <span data-notify=\"icon\" class=\"nc-icon nc-simple-add\"></span> -->\n\n<ng-template #content>\n  <div class=\"modal-body\">\n    <h6 class=\"modal-title mt-1 pt-2\">{{ context?.title }}</h6>\n    <p>{{ context?.description }}</p>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-sm btn-rounded btn-danger\" (click)=\"delete()\" [disabled]=\"uploading\">Delete</button>\n    <button class=\"btn btn-sm btn-rounded btn-secondary\" (click)=\"ok()\">Cancel</button>\n  </div>\n</ng-template>"],"sourceRoot":"webpack:///"}