{"version":3,"sources":["./src/app/shared/dashboard-resource/resource-form/resource-form.component.ts","./src/app/shared/dashboard-resource/resource-form/resource-form.component.html","./src/app/shared/dashboard-resource/search.pipe.ts","./src/app/dashboard/notifications/notification-form/notification-form.component.html","./src/app/dashboard/notifications/notification-form/notification-form.component.ts","./src/app/dashboard/notifications/notifications-routing.module.ts","./src/app/dashboard/notifications/index/index.component.ts","./src/app/dashboard/notifications/index/index.component.html","./src/app/dashboard/notifications/notifications.module.ts","./node_modules/ngx-print/__ivy_ngcc__/fesm2015/ngx-print.js","./src/app/shared/dashboard-resource/dashboard-resource.module.ts"],"names":["ResourceFormContent","http","route","router","service","this","message","uploading","modal","openModal","initData","resource","history","state","formGroup","patchValue","isEdit","snapshot","routeConfig","path","includes","title","ok","tryCreateResource","tryUpdateResource","dismiss","dismissAll","setTimeout","navigateByUrl","parentUrl","apiUrl","prepareUrl","postUrl","params","post","value","toPromise","then","res","console","log","reset","finally","putUrl","put","ResourceFormComponent","modalService","resolver","type","TYPES","get","data","component","factory","resolveComponentFactory","container","createComponent","content","instance","open","size","backdrop","Map","SearchPipe","search","length","props","Object","keys","filter","e","some","p","toLocaleUpperCase","NotificationFormComponent","super","minLength","body","push_type","topic","keyboard","Error","routes","IndexComponent","children","redirectTo","NotificationsRoutingModule","forChild","NotificationsModule","provide","useClass","multi","NgxPrintDirective","_printStyle","useExistingCss","printDelay","_styleSheetFile","values","key","hasOwnProperty","push","JSON","stringify","replace","returnStyleValues","join","cssList","linkTagFn","cssFileName","indexOf","valueArr","split","val","tag","html","elements","document","getElementsByTagName","index","outerHTML","printContents","getElementById","printSectionId","innards","i","defaultValue","innerHTML","popupWin","styles","links","getElementTag","getHtmlContents","window","write","printTitle","returnStyleSheetLinkTags","close","ɵfac","t","ɵdir","selectors","hostBindings","rf","ctx","print","inputs","printStyle","styleSheetFile","NgxPrintModule","ɵmod","ɵinj","imports","DashboardResourceModule"],"mappings":"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","file":"7.de3bb2553717c0dc1e96.js","sourcesContent":["import {\n  Component, AfterViewInit, ComponentFactoryResolver, ViewChild,\n  ViewContainerRef, Type, OnDestroy, AfterContentInit\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal, NgbModalOptions, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-resource-form-content',\n  template: '<h1>Hello</h1>'\n})\n// tslint:disable-next-line: component-class-suffix\nexport abstract class ResourceFormContent implements AfterViewInit, AfterContentInit {\n  title: string;\n  message: string;\n  formGroup: FormGroup;\n  isEdit: boolean;\n\n  public uploading: boolean;\n\n  modal: NgbModalRef;\n\n  abstract get postUrl(): string;\n  abstract get putUrl(): string;\n  abstract get parentUrl(): string;\n\n  constructor(protected http: HttpClient, protected route: ActivatedRoute, protected router: Router, protected service: NgbModal) {\n    this.message = 'Please fill the following form then click submit button';\n    this.uploading = false;\n  }\n\n  ngAfterViewInit(): void {\n    this.modal = this.openModal();\n    this.initData();\n  }\n\n  ngAfterContentInit(): void {\n  }\n\n  initData(): void {\n    const resource = history.state.resource;\n\n    if (resource)\n    {\n      this.formGroup.patchValue(resource);\n    }\n\n    this.isEdit = this.route.snapshot.routeConfig.path.includes('edit');\n    this.title = this.isEdit ? 'Edit Resource' : 'Create Resource';\n\n    if (this.isEdit && !resource)\n    {\n      return this.ok();\n    }\n  }\n\n  abstract openModal(): NgbModalRef;\n\n  submit(): void {\n    this.tryCreateResource();\n    this.tryUpdateResource();\n  }\n\n  ok(): void {\n    if (this.modal)\n    {\n      this.modal.dismiss();\n    }\n    else\n    {\n      this.service.dismissAll();\n    }\n    setTimeout(() => {\n      this.router.navigateByUrl(this.parentUrl);\n    }, 250);\n    // history.back();\n  }\n\n  protected async tryCreateResource(): Promise<void> {\n    if (this.isEdit)\n    {\n      return;\n    }\n    this.uploading = true;\n\n    const apiUrl = environment.prepareUrl(this.postUrl, this.route.snapshot.params);\n\n    return this.http.post(apiUrl, this.formGroup.value)\n      .toPromise()\n      .then(res => {\n        console.log(res);\n        if (res)\n        {\n          this.formGroup.reset();\n          this.ok();\n        }\n      })\n      .finally(() => this.uploading = false);\n  }\n\n  protected async tryUpdateResource(): Promise<void> {\n    if (!this.isEdit)\n    {\n      return;\n    }\n\n    this.uploading = true;\n    const apiUrl = environment.prepareUrl(this.putUrl, this.route.snapshot.params);\n\n    return this.http.put(apiUrl, this.formGroup.value)\n      .toPromise()\n      .then(res => {\n        console.log(res);\n        if (res)\n        {\n          this.formGroup.reset();\n          this.ok();\n        }\n      })\n      .finally(() => this.uploading = false);\n  }\n}\n\n@Component({\n  selector: 'app-resource-form',\n  templateUrl: './resource-form.component.html',\n  styleUrls: ['./resource-form.component.scss']\n})\nexport class ResourceFormComponent<TContent extends ResourceFormContent> implements AfterViewInit, OnDestroy {\n  public static TYPES: Map<string, Type<any>> = new Map();\n\n  modal: NgbModalRef;\n  content: TContent;\n  @ViewChild('container', { read: ViewContainerRef }) container: ViewContainerRef;\n\n  constructor(\n    private route: ActivatedRoute,\n    private modalService: NgbModal,\n    private resolver: ComponentFactoryResolver) {\n  }\n\n  ngAfterViewInit(): void {\n    const options: NgbModalOptions = {\n      size: 'md',\n      backdrop: 'static',\n    };\n\n    const type = ResourceFormComponent.TYPES.get(this.route.snapshot.data.component);\n    console.log(type);\n    const factory = this.resolver.resolveComponentFactory<TContent>(type);\n    const component = this.container.createComponent(factory);\n\n    this.content = component.instance;\n    this.modal = this.modalService.open(component.instance, options);\n  }\n\n  ngOnDestroy(): void {\n    if (this.modal != null)\n    {\n      this.modal.dismiss();\n      return;\n    }\n    this.modalService.dismissAll();\n  }\n\n  ok(): void {\n\n  }\n}\n","<ngb-alert type=\"info\" (close)=\"ok()\">{{ content?.message }}</ngb-alert>\n<!-- <span data-notify=\"icon\" class=\"nc-icon nc-simple-add\"></span> -->\n\n<ng-template #container></ng-template>","import { Pipe, PipeTransform } from '@angular/core';\nimport { Resource } from './resource.model';\n\n@Pipe({\n  name: 'search'\n})\nexport class SearchPipe implements PipeTransform {\n\n  transform<T>(data: T[], search: string): T[] {\n    if (!data || data.length === 0)\n    {\n      return [];\n    }\n\n    if (!search)\n    {\n      return data;\n    }\n\n    const props = Object.keys(data[0]);\n    return data.filter(e => props.some(p => `${ e[p] }`.toLocaleUpperCase().includes(search.toLocaleUpperCase())));\n  }\n\n}\n","<ngb-alert type=\"info\" (close)=\"ok()\">{{ message }}</ngb-alert>\n\n<ng-template #content>\n  <div class=\"modal-header\">\n    <h6 class=\"modal-title pt-1 mt-1\">\n      {{ title }}\n    </h6>\n    <button type=\"button\" class=\"close\" style=\"border: none; outline: none;\" (click)=\"ok()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <form [formGroup]=\"formGroup\" autocomplete=\"off\">\n      <div class=\"row\">\n        <div class=\"col-12 px-3\">\n          <div class=\"form-group\">\n            <label>Title</label>\n            <input type=\"text\" class=\"form-control\" placeholder=\"Title\" formControlName=\"title\" autocomplete=\"off\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12 px-3\">\n          <div class=\"form-group\">\n            <label>Body</label>\n            <input type=\"text\" class=\"form-control\" placeholder=\"Body\" formControlName=\"body\" autocomplete=\"off\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"update ml-auto mr-auto\">\n          <button type=\"submit\" class=\"btn btn-primary btn-round\" [disabled]=\"uploading || !formGroup.dirty || !formGroup.touched || !formGroup.valid\" (click)=\"submit()\">\n            Submit\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</ng-template>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ResourceFormContent } from 'src/app/shared/dashboard-resource/resource-form/resource-form.component';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbModal, NgbModalRef, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-notification-form',\n  templateUrl: './notification-form.component.html',\n  styleUrls: ['./notification-form.component.scss']\n})\nexport class NotificationFormComponent extends ResourceFormContent {\n\n  title: string;\n  message: string;\n  formGroup: FormGroup;\n\n  @ViewChild('content') content: ElementRef<HTMLElement>;\n\n  constructor(http: HttpClient, route: ActivatedRoute, router: Router, service: NgbModal) {\n    super(http, route, router, service);\n\n    this.formGroup = new FormGroup({\n      title: new FormControl(null, Validators.minLength(3)),\n      body: new FormControl(null, Validators.minLength(5)),\n      push_type: new FormControl('topic'),\n      topic: new FormControl('user'),\n    });\n  }\n\n  openModal(): NgbModalRef {\n    const options: NgbModalOptions = {\n      backdrop: 'static',\n      keyboard: false,\n    };\n    return this.service.open(this.content, options);\n  }\n\n  get postUrl(): string {\n    return 'notificationsPushUrl';\n  }\n\n  get putUrl(): string {\n    throw new Error('Put is not supported for this component');\n  }\n\n  get parentUrl(): string {\n    return '/notifications';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NotificationFormComponent } from './notification-form/notification-form.component';\nimport { IndexComponent } from './index/index.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: IndexComponent,\n    children: [\n      {\n        path: 'create',\n        component: NotificationFormComponent,\n      },\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: '',\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NotificationsRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.scss']\n})\nexport class IndexComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-12\">\n    <router-outlet></router-outlet>\n    <div class=\"card\" style=\"height: calc(100vh - 175px);\">\n      <div class=\"card-body\">\n        <div class=\"h-100 d-flex align-items-center justify-content-center\">\n          <div class=\"text-center\">\n            <h6>Notifications</h6>\n            <a [routerLink]=\"['create']\" class=\"btn btn-primary px-3 mt-1\">Create</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NotificationsRoutingModule } from './notifications-routing.module';\nimport { NotificationFormComponent } from './notification-form/notification-form.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthInterceptor } from 'src/app/interceptors/auth.interceptor';\nimport { DashboardResourceModule } from 'src/app/shared/dashboard-resource/dashboard-resource.module';\nimport { RouterModule } from '@angular/router';\nimport { IndexComponent } from './index/index.component';\n\n\n@NgModule({\n  declarations: [NotificationFormComponent, IndexComponent],\n  imports: [\n    CommonModule,\n    NotificationsRoutingModule,\n    NgbModule,\n    RouterModule,\n    ReactiveFormsModule,\n    DashboardResourceModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ]\n})\nexport class NotificationsModule { }\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass NgxPrintDirective {\n    constructor() {\n        this._printStyle = [];\n        /**\n         *\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this.useExistingCss = false;\n        /**\n         * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this.printDelay = 0;\n        /**\n         *\n         *\n         * @return html for the given tag\n         *\n         * \\@memberof NgxPrintDirective\n         */\n        this._styleSheetFile = '';\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @param {?} values\n     * @return {?}\n     */\n    set printStyle(values) {\n        for (let key in values) {\n            if (values.hasOwnProperty(key)) {\n                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n            }\n        }\n        this.returnStyleValues();\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @return {?} the string that create the stylesheet which will be injected\n     * later within <style></style> tag.\n     *\n     * -join/replace to transform an array objects to css-styled string\n     *\n     */\n    returnStyleValues() {\n        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\n    }\n    /**\n     * \\@memberof NgxPrintDirective\n     * @param {?} cssList\n     * @return {?}\n     */\n    set styleSheetFile(cssList) {\n        /** @type {?} */\n        let linkTagFn = (/**\n         * @param {?} cssFileName\n         * @return {?}\n         */\n        function (cssFileName) {\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\n        });\n        if (cssList.indexOf(',') !== -1) {\n            /** @type {?} */\n            const valueArr = cssList.split(',');\n            for (let val of valueArr) {\n                this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\n            }\n        }\n        else {\n            this._styleSheetFile = linkTagFn(cssList);\n        }\n    }\n    /**\n     * @private\n     * @return {?} string which contains the link tags containing the css which will\n     * be injected later within <head></head> tag.\n     *\n     */\n    returnStyleSheetLinkTags() {\n        return this._styleSheetFile;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @return {?}\n     */\n    getElementTag(tag) {\n        /** @type {?} */\n        const html = [];\n        /** @type {?} */\n        const elements = document.getElementsByTagName(tag);\n        for (let index = 0; index < elements.length; index++) {\n            html.push(elements[index].outerHTML);\n        }\n        return html.join('\\r\\n');\n    }\n    /**\n     * @private\n     * @return {?} html section to be printed along with some associated inputs\n     *\n     */\n    getHtmlContents() {\n        /** @type {?} */\n        let printContents = document.getElementById(this.printSectionId);\n        /** @type {?} */\n        let innards = printContents.getElementsByTagName('input');\n        for (var i = 0; i < innards.length; i++) {\n            innards[i].defaultValue = innards[i].value;\n        }\n        return printContents.innerHTML;\n    }\n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @return {?}\n     */\n    print() {\n        /** @type {?} */\n        let printContents;\n        /** @type {?} */\n        let popupWin;\n        /** @type {?} */\n        let styles = '';\n        /** @type {?} */\n        let links = '';\n        if (this.useExistingCss) {\n            styles = this.getElementTag('style');\n            links = this.getElementTag('link');\n        }\n        printContents = this.getHtmlContents();\n        popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\n        popupWin.document.open();\n        popupWin.document.write(`\n      <html>\n        <head>\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\n          ${this.returnStyleValues()}\n          ${this.returnStyleSheetLinkTags()}\n          ${styles}\n          ${links}\n        </head>\n        <body>\n          ${printContents}\n          <script defer>\n            function triggerPrint(event) {\n              window.removeEventListener('load', triggerPrint, false);\n              setTimeout(function() {\n                window.print();\n                setTimeout(function() { window.close(); }, 0);\n              }, ${this.printDelay});\n            }\n            window.addEventListener('load', triggerPrint, false);\n          </script>\n        </body>\n      </html>`);\n        popupWin.document.close();\n    }\n}\nNgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) { return new (t || NgxPrintDirective)(); };\nNgxPrintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxPrintDirective, selectors: [[\"button\", \"ngxPrint\", \"\"]], hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() { return ctx.print(); });\n    } }, inputs: { useExistingCss: \"useExistingCss\", printDelay: \"printDelay\", printStyle: \"printStyle\", styleSheetFile: \"styleSheetFile\", printSectionId: \"printSectionId\", printTitle: \"printTitle\" } });\nNgxPrintDirective.propDecorators = {\n    printSectionId: [{ type: Input }],\n    printTitle: [{ type: Input }],\n    useExistingCss: [{ type: Input }],\n    printDelay: [{ type: Input }],\n    printStyle: [{ type: Input }],\n    styleSheetFile: [{ type: Input }],\n    print: [{ type: HostListener, args: ['click',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPrintDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"button[ngxPrint]\"\n            }]\n    }], function () { return []; }, { useExistingCss: [{\n            type: Input\n        }], printDelay: [{\n            type: Input\n        }], printStyle: [{\n            type: Input\n        }], styleSheetFile: [{\n            type: Input\n        }], print: [{\n            type: HostListener,\n            args: ['click']\n        }], printSectionId: [{\n            type: Input\n        }], printTitle: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxPrintModule {\n}\nNgxPrintModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxPrintModule });\nNgxPrintModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxPrintModule_Factory(t) { return new (t || NgxPrintModule)(); }, imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPrintModule, { declarations: [NgxPrintDirective], exports: [NgxPrintDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxPrintModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxPrintDirective],\n                imports: [],\n                exports: [NgxPrintDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxPrintDirective, NgxPrintModule };\n\n//# sourceMappingURL=ngx-print.js.map","import { NgModule } from '@angular/core';\nimport { CommonModule, SlicePipe } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\nimport { TableViewComponent } from './table-view/table-view.component';\nimport { ResourceDetailsComponent } from './resource-details/resource-details.component';\nimport { ResourceFormComponent } from './resource-form/resource-form.component';\nimport { ResourceDeleteComponent } from './resource-delete/resource-delete.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxUiLoaderModule, NgxUiLoaderRouterModule } from 'ngx-ui-loader';\nimport { NgxPrintModule } from 'ngx-print';\nimport { SearchPipe } from './search.pipe';\n\n@NgModule({\n  declarations: [TableViewComponent, ResourceDetailsComponent, ResourceFormComponent, ResourceDeleteComponent, SearchPipe],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgbModule,\n    NgxUiLoaderModule,\n    NgxUiLoaderRouterModule,\n    NgxPrintModule,\n  ],\n  exports: [\n    TableViewComponent,\n    ResourceDetailsComponent,\n    ResourceFormComponent,\n    ResourceDeleteComponent\n  ],\n  providers: [SearchPipe, SlicePipe],\n})\nexport class DashboardResourceModule { }\n"],"sourceRoot":"webpack:///"}